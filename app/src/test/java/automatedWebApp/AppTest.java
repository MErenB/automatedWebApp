/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package automatedWebApp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void isResultCorrect() {
        ArrayList<Integer> arrList = new ArrayList<Integer>();
        arrList.add(0);
        arrList.add(2);
        arrList.add(4);
        arrList.add(9);

        
        

        assertEquals("Result is:"+Double.valueOf(13500), App.multiplyAllNumbersUpperThanBound(arrList,Long.valueOf(1500),4,"Result is:"));
        assertEquals("Result is:"+Double.valueOf(65), App.multiplyAllNumbersUpperThanBound(arrList,Byte.valueOf((byte) 5),3,"Result is:"));

    }

    @Test void nullArrayList() {
        ArrayList<Integer> arrList = null;


        assertThrows( IllegalArgumentException.class, 
        () -> {App.multiplyAllNumbersUpperThanBound(arrList, Double.valueOf(1890.2), 5, "This should not appear"); });
        
        
        
    }

    @Test void nullNumber() {
        ArrayList<Integer> arrList = new ArrayList<>();
        arrList.add(5);
        arrList.add(10);

        assertThrows(IllegalArgumentException.class , () -> {App.multiplyAllNumbersUpperThanBound(arrList, null, 5, "This should not appear"); });
    }

    @Test void nullMessage() {
        ArrayList<Integer> arrList = new ArrayList<>();
        arrList.add(1000);
        arrList.add(2000);

        assertThrows(IllegalArgumentException.class , () -> {App.multiplyAllNumbersUpperThanBound(arrList, Long.valueOf(5), 5, null); });

        
        
    }

    @Test void allLessThanLowerBound() {
        ArrayList<Integer> arrList = new ArrayList<>();
        arrList.add(2);
        arrList.add(1);
        arrList.add(3);

        assertEquals("All values are lower than the bound.", App.multiplyAllNumbersUpperThanBound(arrList, Long.valueOf(20), 500, "Signal results:"));
    }

    

}
